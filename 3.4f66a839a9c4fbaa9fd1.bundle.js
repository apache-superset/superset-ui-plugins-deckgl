(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{1022:function(t,n,e){"use strict";var i=e(945),o=e(946),r=e(948),s=e(947),a=e(958),l=e(949),c=e(1005),p=e(1136),u=e(1071),f=e(952),v=e(1294),d=f.a.Tesselator,h=v.a.fp64LowPart,x=function(t){function n(t){var e=t.data,o=t.getGeometry,a=t.positionFormat,l=t.fp64;return Object(i.a)(this,n),Object(r.a)(this,Object(s.a)(n).call(this,{data:e,getGeometry:o,fp64:l,positionFormat:a,attributes:{startPositions:{size:3},endPositions:{size:3},leftPositions:{size:3},rightPositions:{size:3},startEndPositions64XyLow:{size:4,fp64Only:!0},neighborPositions64XyLow:{size:4,fp64Only:!0}}}))}return Object(l.a)(n,t),Object(o.a)(n,[{key:"get",value:function(t){return this.attributes[t]}},{key:"getGeometrySize",value:function(t){return Math.max(0,this.getPathLength(t)-1)}},{key:"updateGeometryAttributes",value:function(t,n){var e=this.attributes,i=e.startPositions,o=e.endPositions,r=e.leftPositions,s=e.rightPositions,a=e.startEndPositions64XyLow,l=e.neighborPositions64XyLow,c=this.fp64,p=n.geometrySize+1;if(!(p<2))for(var u,f=this.isClosed(t),v=this.getPointOnPath(t,0),d=this.getPointOnPath(t,1),x=f?this.getPointOnPath(t,p-2):v,y=n.vertexStart,g=1;g<p;y++,g++)u=g+1<p?this.getPointOnPath(t,g+1):f?this.getPointOnPath(t,1):d,i[3*y]=v[0],i[3*y+1]=v[1],i[3*y+2]=v[2]||0,o[3*y]=d[0],o[3*y+1]=d[1],o[3*y+2]=d[2]||0,r[3*y]=x[0],r[3*y+1]=x[1],r[3*y+2]=x[2]||0,s[3*y]=u[0],s[3*y+1]=u[1],s[3*y+2]=u[2]||0,c&&(a[4*y]=h(v[0]),a[4*y+1]=h(v[1]),a[4*y+2]=h(d[0]),a[4*y+3]=h(d[1]),l[4*y]=h(x[0]),l[4*y+1]=h(x[1]),l[4*y+2]=h(u[0]),l[4*y+3]=h(u[1])),x=v,v=d,d=u}},{key:"getPathLength",value:function(t){return Number.isFinite(t[0])?t.length/this.positionSize:t.length}},{key:"getPointOnPath",value:function(t,n){if(Number.isFinite(t[0])){var e=this.positionSize;return[t[n*e],t[n*e+1],3===e?t[n*e+2]:0]}return t[n]}},{key:"isClosed",value:function(t){var n=this.getPathLength(t),e=this.getPointOnPath(t,0),i=this.getPointOnPath(t,n-1);return e[0]===i[0]&&e[1]===i[1]&&e[2]===i[2]}}]),n}(d),y="#define SHADER_NAME path-layer-fragment-shader\n\nprecision highp float;\n\nuniform float jointType;\nuniform float miterLimit;\nuniform float alignMode;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\nvarying vec2 vDashArray;\nvarying vec2 vPathPosition;\nvarying float vPathLength;\nfloat mod2(float a, float b) {\n  return a - floor(a / b) * b;\n}\n\nfloat round(float x) {\n  return floor(x + 0.5);\n}\nbool dash_isFragInGap() {\n  float solidLength = vDashArray.x;\n  float gapLength = vDashArray.y;\n\n  float unitLength = solidLength + gapLength;\n\n  if (unitLength == 0.0) {\n    return false;\n  }\n\n  unitLength = mix(\n    unitLength,\n    vPathLength / round(vPathLength / unitLength),\n    alignMode\n  );\n\n  float offset = alignMode * solidLength / 2.0;\n\n  return gapLength > 0.0 &&\n    vPathPosition.y >= 0.0 &&\n    vPathPosition.y <= vPathLength &&\n    mod2(vPathPosition.y + offset, unitLength) > solidLength;\n}\n\nvoid main(void) {\n  if (jointType > 0.0 && vMiterLength > 0.0 && length(vCornerOffset) > 1.0) {\n    discard;\n  }\n  if (jointType == 0.0 && vMiterLength > miterLimit) {\n    discard;\n  }\n  if (vColor.a == 0.0 || dash_isFragInGap()) {\n    discard;\n  }\n  gl_FragColor = vColor;\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n}\n";e.d(n,"a",(function(){return b}));var g=[0,0,0,255],P={widthUnits:"meters",widthScale:{type:"number",min:0,value:1},widthMinPixels:{type:"number",min:0,value:0},widthMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},rounded:!1,miterLimit:{type:"number",min:0,value:4},fp64:!1,dashJustified:!1,billboard:!1,getPath:{type:"accessor",value:function(t){return t.path}},getColor:{type:"accessor",value:g},getWidth:{type:"accessor",value:1},getDashArray:{type:"accessor",value:[0,0]}},m={enter:function(t,n){return n.length?n.subarray(n.length-t.length):t}},b=function(t){function n(){return Object(i.a)(this,n),Object(r.a)(this,Object(s.a)(n).apply(this,arguments))}return Object(l.a)(n,t),Object(o.a)(n,[{key:"getShaders",value:function(){return this.use64bitProjection()?{vs:"\n#define SHADER_NAME path-layer-vertex-shader-64\n\nattribute vec3 positions;\n\nattribute vec3 instanceStartPositions;\nattribute vec3 instanceEndPositions;\nattribute vec4 instanceStartEndPositions64xyLow;\nattribute vec3 instanceLeftPositions;\nattribute vec3 instanceRightPositions;\nattribute vec4 instanceNeighborPositions64xyLow;\nattribute float instanceStrokeWidths;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute vec2 instanceDashArrays;\n\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform float jointType;\nuniform float miterLimit;\n\nuniform float opacity;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\nvarying vec2 vDashArray;\nvarying vec2 vPathPosition;\nvarying float vPathLength;\n\nconst float EPSILON = 0.001;\n\nfloat flipIfTrue(bool flag) {\n  return -(float(flag) * 2. - 1.);\n}\n\nvec3 lineJoin(vec2 prevPoint64[2], vec2 currPoint64[2], vec2 nextPoint64[2]) {\n\n  float widthPixels = clamp(project_size_to_pixel(instanceStrokeWidths * widthScale),\n    widthMinPixels, widthMaxPixels) / 2.0;\n  float width = project_pixel_size(widthPixels);\n\n  vec2 deltaA64[2];\n  vec2 deltaB64[2];\n\n  vec2_sub_fp64(currPoint64, prevPoint64, deltaA64);\n  vec2_sub_fp64(nextPoint64, currPoint64, deltaB64);\n\n  vec2 lengthA64 = vec2_length_fp64(deltaA64);\n  vec2 lengthB64 = vec2_length_fp64(deltaB64);\n\n  vec2 deltaA = vec2(deltaA64[0].x, deltaA64[1].x);\n  vec2 deltaB = vec2(deltaB64[0].x, deltaB64[1].x);\n\n  float lenA = lengthA64.x;\n  float lenB = lengthB64.x;\n\n  vec2 offsetVec;\n  float offsetScale;\n  float offsetDirection;\n  lenA = lenA / width > EPSILON ? lenA : 0.0;\n  lenB = lenB / width > EPSILON ? lenB : 0.0;\n  vec2 dirA = lenA > 0. ? deltaA / lenA : vec2(0.0, 0.0);\n  vec2 dirB = lenB > 0. ? deltaB / lenB : vec2(0.0, 0.0);\n\n  vec2 perpA = vec2(-dirA.y, dirA.x);\n  vec2 perpB = vec2(-dirB.y, dirB.x);\n  vec2 tangent = vec2(dirA + dirB);\n  tangent = length(tangent) > 0. ? normalize(tangent) : perpA;\n  vec2 miterVec = vec2(-tangent.y, tangent.x);\n  vec2 perp = mix(perpB, perpA, positions.x);\n  float L = mix(lenB, lenA, positions.x);\n  float sinHalfA = abs(dot(miterVec, perp));\n  float cosHalfA = abs(dot(dirA, miterVec));\n  bool turnsRight = dirA.x * dirB.y > dirA.y * dirB.x;\n  float cornerPosition = mix(\n    flipIfTrue(turnsRight == (positions.y > 0.0)),\n    0.0,\n    positions.z\n  );\n\n  offsetScale = 1.0 / max(sinHalfA, EPSILON);\n  cornerPosition *= float(cornerPosition <= 0.0 || sinHalfA < min(lenA, lenB) / width * cosHalfA);\n  offsetScale = mix(\n    offsetScale,\n    min(offsetScale, L / width / max(cosHalfA, EPSILON)),\n    float(cornerPosition < 0.0)\n  );\n\n  vMiterLength = mix(\n    offsetScale * cornerPosition,\n    mix(offsetScale, 0.0, cornerPosition),\n    step(0.0, cornerPosition)\n  ) - sinHalfA * jointType;\n  offsetDirection = mix(\n    positions.y,\n    mix(\n      flipIfTrue(turnsRight),\n      positions.y * flipIfTrue(turnsRight == (positions.x == 1.)),\n      cornerPosition\n    ),\n    step(0.0, cornerPosition)\n  );\n  offsetVec = mix(miterVec, -tangent, step(0.5, cornerPosition));\n  offsetScale = mix(offsetScale, 1.0 / max(cosHalfA, 0.001), step(0.5, cornerPosition));\n  float isStartCap = step(lenA, 1.0e-5);\n  float isEndCap = step(lenB, 1.0e-5);\n  float isCap = max(isStartCap, isEndCap);\n  cornerPosition = isCap * (1.0 - positions.z);\n  offsetVec = mix(offsetVec, mix(dirB, perpB, cornerPosition), isStartCap);\n  offsetVec = mix(offsetVec, mix(dirA, perpA, cornerPosition), isEndCap);\n  offsetScale = mix(\n    offsetScale,\n    mix(4.0 * jointType, 1.0, cornerPosition),\n    isCap\n  );\n  vMiterLength = mix(vMiterLength, 1.0 - cornerPosition, isCap);\n\n  offsetDirection = mix(\n    offsetDirection,\n    mix(flipIfTrue(isStartCap > 0.), positions.y, cornerPosition),\n    isCap\n  );\n\n  vCornerOffset = offsetVec * offsetDirection * offsetScale;\n  vDashArray = instanceDashArrays;\n  vPathLength = L / width;\n  float isEnd = positions.x;\n  vec2 offsetFromStartOfPath = mix(vCornerOffset, vCornerOffset + deltaA / width, isEnd);\n  vec2 dir = mix(dirB, dirA, isEnd);\n  vPathPosition = vec2(\n    positions.y + positions.z * offsetDirection,\n    dot(offsetFromStartOfPath, dir)\n  );\n\n  return vec3(vCornerOffset * width, 0.0);\n}\n\nvoid main() {\n  vColor = vec4(instanceColors.rgb, instanceColors.a * opacity) / 255.;\n  picking_setPickingColor(instancePickingColors);\n\n  float isEnd = positions.x;\n\n  vec3 currPosition = mix(instanceStartPositions, instanceEndPositions, isEnd);\n  vec2 currPosition64xyLow = mix(instanceStartEndPositions64xyLow.xy, instanceStartEndPositions64xyLow.zw, isEnd);\n  vec2 projected_curr_position[2];\n  project_position_fp64(currPosition.xy, currPosition64xyLow, projected_curr_position);\n  float projected_curr_position_z = project_size(currPosition.z);\n\n  vec3 prevPosition = mix(instanceLeftPositions, instanceStartPositions, isEnd);\n  vec2 prevPosition64xyLow = mix(instanceNeighborPositions64xyLow.xy, instanceStartEndPositions64xyLow.xy, isEnd);\n\n  vec2 projected_prev_position[2];\n  project_position_fp64(prevPosition.xy, prevPosition64xyLow, projected_prev_position);\n  vec3 nextPosition = mix(instanceEndPositions, instanceRightPositions, isEnd);\n  vec2 nextPosition64xyLow = mix(instanceStartEndPositions64xyLow.zw, instanceNeighborPositions64xyLow.zw, isEnd);\n\n  vec2 projected_next_position[2];\n  project_position_fp64(nextPosition.xy, nextPosition64xyLow, projected_next_position);\n\n  vec3 pos = lineJoin(projected_prev_position, projected_curr_position, projected_next_position);\n  vec2 vertex_pos_modelspace[4];\n\n  vertex_pos_modelspace[0] = sum_fp64(vec2(pos.x, 0.0), projected_curr_position[0]);\n  vertex_pos_modelspace[1] = sum_fp64(vec2(pos.y, 0.0), projected_curr_position[1]);\n  vertex_pos_modelspace[2] = vec2(pos.z + projected_curr_position_z, 0.0);\n  vertex_pos_modelspace[3] = vec2(1.0, 0.0);\n\n  gl_Position = project_common_position_to_clipspace_fp64(vertex_pos_modelspace);\n}\n",fs:y,modules:["project64","picking"]}:{vs:"#define SHADER_NAME path-layer-vertex-shader\n\nattribute vec3 positions;\n\nattribute vec3 instanceStartPositions;\nattribute vec3 instanceEndPositions;\nattribute vec4 instanceStartEndPositions64xyLow;\nattribute vec3 instanceLeftPositions;\nattribute vec3 instanceRightPositions;\nattribute vec4 instanceNeighborPositions64xyLow;\nattribute float instanceStrokeWidths;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute vec2 instanceDashArrays;\n\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform float jointType;\nuniform float miterLimit;\nuniform bool billboard;\n\nuniform float opacity;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\nvarying vec2 vDashArray;\nvarying vec2 vPathPosition;\nvarying float vPathLength;\n\nconst float EPSILON = 0.001;\nconst vec3 ZERO_OFFSET = vec3(0.0);\n\nfloat flipIfTrue(bool flag) {\n  return -(float(flag) * 2. - 1.);\n}\nvec3 lineJoin(\n  vec3 prevPoint, vec3 currPoint, vec3 nextPoint,\n  float relativePosition, bool isEnd, bool isJoint,\n  vec2 width\n) {\n  vec2 deltaA = (currPoint.xy - prevPoint.xy) / width;\n  vec2 deltaB = (nextPoint.xy - currPoint.xy) / width;\n\n  float lenA = length(deltaA);\n  float lenB = length(deltaB);\n  lenA = lenA > EPSILON ? lenA : 0.0;\n  lenB = lenB > EPSILON ? lenB : 0.0;\n\n  vec2 dirA = lenA > 0. ? normalize(deltaA) : vec2(0.0, 0.0);\n  vec2 dirB = lenB > 0. ? normalize(deltaB) : vec2(0.0, 0.0);\n\n  vec2 perpA = vec2(-dirA.y, dirA.x);\n  vec2 perpB = vec2(-dirB.y, dirB.x);\n  vec2 tangent = vec2(dirA + dirB);\n  tangent = length(tangent) > 0. ? normalize(tangent) : perpA;\n  vec2 miterVec = vec2(-tangent.y, tangent.x);\n  vec2 perp = isEnd ? perpA : perpB;\n  float L = isEnd ? lenA : lenB;\n  float sinHalfA = abs(dot(miterVec, perp));\n  float cosHalfA = abs(dot(dirA, miterVec));\n\n  bool turnsRight = dirA.x * dirB.y > dirA.y * dirB.x;\n\n  float offsetScale = 1.0 / max(sinHalfA, EPSILON);\n\n  float cornerPosition = isJoint ?\n    0.0 :\n    flipIfTrue(turnsRight == (relativePosition > 0.0));\n  cornerPosition *=\n    float(cornerPosition <= 0.0 || sinHalfA < min(lenA, lenB) * cosHalfA);\n  if (cornerPosition < 0.0) {\n    offsetScale = min(offsetScale, L / max(cosHalfA, EPSILON));\n  }\n\n  vMiterLength = cornerPosition >= 0.0 ?\n    mix(offsetScale, 0.0, cornerPosition) :\n    offsetScale * cornerPosition;\n  vMiterLength -= sinHalfA * jointType;\n\n  float offsetDirection = mix(\n    positions.y,\n    mix(\n      flipIfTrue(turnsRight),\n      positions.y * flipIfTrue(turnsRight == (positions.x == 1.)),\n      cornerPosition\n    ),\n    step(0.0, cornerPosition)\n  );\n\n  vec2 offsetVec = mix(miterVec, -tangent, step(0.5, cornerPosition));\n  offsetScale = mix(offsetScale, 1.0 / max(cosHalfA, 0.001), step(0.5, cornerPosition));\n  bool isStartCap = step(0.0, -lenA) > 0.5;\n  bool isEndCap = step(0.0, -lenB) > 0.5;\n  bool isCap = isStartCap || isEndCap;\n  cornerPosition = isCap ? (1.0 - positions.z) : 0.;\n  if (isStartCap) {\n    offsetVec = mix(dirB, perpB, cornerPosition);\n  }\n  if (isEndCap) {\n    offsetVec = mix(dirA, perpA, cornerPosition);\n  }\n  if (isCap) {\n    offsetScale = mix(4.0 * jointType, 1.0, cornerPosition);\n    vMiterLength = 1.0 - cornerPosition;\n    offsetDirection = mix(flipIfTrue(isStartCap), positions.y, cornerPosition);\n  }\n\n  vCornerOffset = offsetVec * offsetDirection * offsetScale;\n  vDashArray = instanceDashArrays;\n  vPathLength = L;\n  vec2 offsetFromStartOfPath = vCornerOffset;\n  if (isEnd) {\n    offsetFromStartOfPath += deltaA;\n  }\n  vec2 dir = isEnd ? dirA : dirB;\n  vPathPosition = vec2(\n    positions.y + positions.z * offsetDirection,\n    dot(offsetFromStartOfPath, dir)\n  );\n\n  return currPoint + vec3(vCornerOffset * width, 0.0);\n}\nvec3 lineJoin(vec3 prevPoint, vec3 currPoint, vec3 nextPoint) {\n\n  float relativePosition = positions.y;\n  bool isEnd = positions.x > EPSILON;\n  bool isJoint = positions.z > EPSILON;\n\n  vec2 widthPixels = vec2(clamp(project_size_to_pixel(instanceStrokeWidths * widthScale),\n    widthMinPixels, widthMaxPixels) / 2.0);\n\n  return lineJoin(\n    prevPoint, currPoint, nextPoint,\n    relativePosition, isEnd, isJoint,\n    billboard ? project_pixel_size_to_clipspace(widthPixels) : project_pixel_size(widthPixels)\n  );\n}\nvoid clipLine(inout vec4 position, vec4 refPosition) {\n  if (position.w < EPSILON) {\n    float r = (EPSILON - refPosition.w) / (position.w - refPosition.w);\n    position = refPosition + (position - refPosition) * r;\n  }\n}\n\nvoid main() {\n  vColor = vec4(instanceColors.rgb, instanceColors.a * opacity) / 255.;\n  picking_setPickingColor(instancePickingColors);\n\n  float isEnd = positions.x;\n\n  vec3 prevPosition = mix(instanceLeftPositions, instanceStartPositions, isEnd);\n  vec2 prevPosition64xyLow = mix(instanceNeighborPositions64xyLow.xy, instanceStartEndPositions64xyLow.xy, isEnd);\n\n  vec3 currPosition = mix(instanceStartPositions, instanceEndPositions, isEnd);\n  vec2 currPosition64xyLow = mix(instanceStartEndPositions64xyLow.xy, instanceStartEndPositions64xyLow.zw, isEnd);\n\n  vec3 nextPosition = mix(instanceEndPositions, instanceRightPositions, isEnd);\n  vec2 nextPosition64xyLow = mix(instanceStartEndPositions64xyLow.zw, instanceNeighborPositions64xyLow.zw, isEnd);\n\n  if (billboard) {\n    vec4 prevPositionScreen = project_position_to_clipspace(prevPosition, prevPosition64xyLow, ZERO_OFFSET);\n    vec4 currPositionScreen = project_position_to_clipspace(currPosition, currPosition64xyLow, ZERO_OFFSET);\n    vec4 nextPositionScreen = project_position_to_clipspace(nextPosition, nextPosition64xyLow, ZERO_OFFSET);\n\n    clipLine(prevPositionScreen, currPositionScreen);\n    clipLine(nextPositionScreen, currPositionScreen);\n    clipLine(currPositionScreen, mix(nextPositionScreen, prevPositionScreen, isEnd));\n\n    vec3 pos = lineJoin(\n      prevPositionScreen.xyz / prevPositionScreen.w,\n      currPositionScreen.xyz / currPositionScreen.w,\n      nextPositionScreen.xyz / nextPositionScreen.w\n    );\n\n    gl_Position = vec4(pos * currPositionScreen.w, currPositionScreen.w);\n  } else {\n    prevPosition = project_position(prevPosition, prevPosition64xyLow);\n    currPosition = project_position(currPosition, currPosition64xyLow);\n    nextPosition = project_position(nextPosition, nextPosition64xyLow);\n\n    vec3 pos = lineJoin(prevPosition, currPosition, nextPosition);\n    gl_Position = project_common_position_to_clipspace(vec4(pos, 1.0));\n  }\n}\n",fs:y,modules:["project32","picking"]}}},{key:"initializeState",value:function(){var t=this;this.getAttributeManager().addInstanced({instanceStartPositions:{size:3,transition:m,accessor:"getPath",update:this.calculateStartPositions,noAlloc:!0},instanceEndPositions:{size:3,transition:m,accessor:"getPath",update:this.calculateEndPositions,noAlloc:!0},instanceStartEndPositions64xyLow:{size:4,update:this.calculateInstanceStartEndPositions64xyLow,noAlloc:!0},instanceLeftPositions:{size:3,accessor:"getPath",update:this.calculateLeftPositions,noAlloc:!0},instanceRightPositions:{size:3,accessor:"getPath",update:this.calculateRightPositions,noAlloc:!0},instanceNeighborPositions64xyLow:{size:4,update:this.calculateInstanceNeighborPositions64xyLow,noAlloc:!0},instanceStrokeWidths:{size:1,accessor:"getWidth",transition:m,defaultValue:1},instanceDashArrays:{size:2,accessor:"getDashArray"},instanceColors:{size:4,type:5121,accessor:"getColor",transition:m,defaultValue:g},instancePickingColors:{size:3,type:5121,accessor:function(n,e){var i=e.index,o=e.target;return t.encodePickingColor(i,o)}}}),this.setState({pathTesselator:new x({})})}},{key:"updateState",value:function(t){var e=t.oldProps,i=t.props,o=t.changeFlags;Object(a.a)(Object(s.a)(n.prototype),"updateState",this).call(this,{props:i,oldProps:e,changeFlags:o});var r=this.getAttributeManager();if(o.dataChanged||i.fp64!==e.fp64||o.updateTriggersChanged&&(o.updateTriggersChanged.all||o.updateTriggersChanged.getPath)){var l=this.state.pathTesselator;l.updateGeometry({data:i.data,getGeometry:i.getPath,positionFormat:i.positionFormat,fp64:this.use64bitPositions()}),this.setState({numInstances:l.instanceCount,bufferLayout:l.bufferLayout}),r.invalidateAll()}if(i.fp64!==e.fp64){var c=this.context.gl;this.state.model&&this.state.model.delete(),this.setState({model:this._getModel(c)}),r.invalidateAll()}}},{key:"draw",value:function(t){var n=t.uniforms,e=this.context.viewport,i=this.props,o=i.rounded,r=i.billboard,s=i.miterLimit,a=i.widthUnits,l=i.widthScale,c=i.widthMinPixels,p=i.widthMaxPixels,u=i.dashJustified,f="pixels"===a?e.distanceScales.metersPerPixel[2]:1;this.state.model.setUniforms(Object.assign({},n,{jointType:Number(o),billboard:r,alignMode:Number(u),widthScale:l*f,miterLimit:s,widthMinPixels:c,widthMaxPixels:p})).draw()}},{key:"_getModel",value:function(t){return new p.a(t,Object.assign({},this.getShaders(),{id:this.props.id,geometry:new u.a({drawMode:4,attributes:{indices:new Uint16Array([0,2,1,1,2,4,1,4,3,3,4,5]),positions:new Float32Array([0,0,1,0,-1,0,0,1,0,1,-1,0,1,1,0,1,0,1])}}),isInstanced:!0,shaderCache:this.context.shaderCache}))}},{key:"calculateStartPositions",value:function(t){var n=this.state.pathTesselator;t.bufferLayout=n.bufferLayout,t.value=n.get("startPositions")}},{key:"calculateEndPositions",value:function(t){var n=this.state.pathTesselator;t.bufferLayout=n.bufferLayout,t.value=n.get("endPositions")}},{key:"calculateInstanceStartEndPositions64xyLow",value:function(t){var n=this.use64bitPositions();t.constant=!n,t.value=n?this.state.pathTesselator.get("startEndPositions64XyLow"):new Float32Array(4)}},{key:"calculateLeftPositions",value:function(t){var n=this.state.pathTesselator;t.value=n.get("leftPositions")}},{key:"calculateRightPositions",value:function(t){var n=this.state.pathTesselator;t.value=n.get("rightPositions")}},{key:"calculateInstanceNeighborPositions64xyLow",value:function(t){var n=this.use64bitPositions();t.constant=!n,t.value=n?this.state.pathTesselator.get("neighborPositions64XyLow"):new Float32Array(4)}},{key:"clearPickingColor",value:function(t){for(var n=this.decodePickingColor(t),e=this.state.pathTesselator.bufferLayout,i=e[n],o=0,r=0;r<n;r++)o+=e[r];var s=this.getAttributeManager().attributes.instancePickingColors,a=s.value,l=o+i;a.fill(0,3*o,3*l),s.update({value:a})}}]),n}(c.a);b.layerName="PathLayer",b.defaultProps=P},1043:function(t,n,e){"use strict";e.d(n,"a",(function(){return f}));var i=e(945),o=e(946),r=e(948),s=e(947),a=e(958),l=e(949),c=e(1005),p=e(966),u=e(993),f=function(t){function n(){return Object(i.a)(this,n),Object(r.a)(this,Object(s.a)(n).apply(this,arguments))}return Object(l.a)(n,t),Object(o.a)(n,[{key:"getSubLayers",value:function(){return this.internalState&&this.internalState.subLayers||[]}},{key:"initializeState",value:function(){}},{key:"setState",value:function(t){Object(a.a)(Object(s.a)(n.prototype),"setState",this).call(this,t),this.setLayerNeedsUpdate()}},{key:"getPickingInfo",value:function(t){return t.info}},{key:"renderLayers",value:function(){return null}},{key:"shouldRenderSubLayer",value:function(t,n){var e=this.props._subLayerProps;return n&&n.length||e&&e[t]}},{key:"getSubLayerClass",value:function(t,n){var e=this.props._subLayerProps;return e&&e[t]&&e[t].type||n}},{key:"getSubLayerProps",value:function(t){var n=this.props,e=n.opacity,i=n.pickable,o=n.visible,r=n.parameters,s=n.getPolygonOffset,a=n.highlightedObjectIndex,l=n.autoHighlight,c=n.highlightColor,p=n.coordinateSystem,u=n.coordinateOrigin,f=n.wrapLongitude,v=n.positionFormat,d=n.modelMatrix,h=n._subLayerProps,x={opacity:e,pickable:i,visible:o,parameters:r,getPolygonOffset:s,highlightedObjectIndex:a,autoHighlight:l,highlightColor:c,coordinateSystem:p,coordinateOrigin:u,wrapLongitude:f,positionFormat:v,modelMatrix:d};if(t){var y=h&&h[t.id],g=y&&y.updateTriggers;Object.assign(x,t,y,{id:"".concat(this.props.id,"-").concat(t.id),updateTriggers:Object.assign({all:this.props.updateTriggers.all},t.updateTriggers,g)})}return x}},{key:"_getAttributeManager",value:function(){return null}},{key:"_renderLayers",value:function(){var t=this.internalState.subLayers;t&&!this.needsUpdate()?p.a.log(3,"Composite layer reused subLayers ".concat(this),this.internalState.subLayers)():(t=this.renderLayers(),t=Object(u.b)(t,{filter:Boolean}),this.internalState.subLayers=t,p.a.log(2,"Composite layer rendered new subLayers ".concat(this),t)());var n=!0,e=!1,i=void 0;try{for(var o,r=t[Symbol.iterator]();!(n=(o=r.next()).done);n=!0){o.value.parent=this}}catch(t){e=!0,i=t}finally{try{n||null==r.return||r.return()}finally{if(e)throw i}}}},{key:"isComposite",get:function(){return!0}}]),n}(c.a);f.layerName="CompositeLayer"},1045:function(t,n,e){"use strict";var i=e(945),o=e(946),r=e(948),s=e(947),a=e(958),l=e(949),c=e(1005),p=e(1145),u=e(1281),f=e(1191),v=e(1136),d=e(1071),h=e(1076),x=e(952),y=e(1294),g=x.a.Tesselator,P=y.a.fp64LowPart,m=function(t){function n(t){var e=t.data,o=t.getGeometry,a=t.fp64,l=t.positionFormat,c=t.IndexType,p=void 0===c?Uint32Array:c;return Object(i.a)(this,n),Object(r.a)(this,Object(s.a)(n).call(this,{data:e,getGeometry:o,fp64:a,positionFormat:l,attributes:{positions:{size:3},positions64xyLow:{size:2,fp64Only:!0},vertexValid:{type:Uint8ClampedArray,size:1},indices:{type:p,size:1}}}))}return Object(l.a)(n,t),Object(o.a)(n,[{key:"get",value:function(t){return"indices"===t?this.attributes.indices.subarray(0,this.vertexCount):this.attributes[t]}},{key:"getGeometrySize",value:function(t){return h.b(t,this.positionSize)}},{key:"updateGeometryAttributes",value:function(t,n){t=h.c(t,this.positionSize,n.geometrySize),this._updateIndices(t,n),this._updatePositions(t,n)}},{key:"_updateIndices",value:function(t,n){var e=n.geometryIndex,i=n.vertexStart,o=n.indexStart,r=this.attributes,s=this.indexLayout,a=this.typedArrayManager,l=r.indices,c=l.length,p=o,u=h.a(t,this.positionSize);c<p+u.length&&(c=2*(p+u.length),l=a.allocate(l,c,{type:l.constructor,size:1,copy:!0}));for(var f=0;f<u.length;f++)l[p++]=u[f]+i;s[e]=u.length,r.indices=l}},{key:"_updatePositions",value:function(t,n){for(var e=n.vertexStart,i=n.geometrySize,o=this.attributes,r=o.positions,s=o.positions64xyLow,a=o.vertexValid,l=this.fp64,c=this.positionSize,p=e,u=t.positions,f=t.holeIndices,v=0;v<i;v++){var d=u[v*c],h=u[v*c+1],x=c>2?u[v*c+2]:0;r[3*p]=d,r[3*p+1]=h,r[3*p+2]=x,l&&(s[2*p]=P(d),s[2*p+1]=P(h)),a[p]=1,p++}if(f)for(var y=0;y<f.length;y++)a[e+f[y]/c-1]=0;a[e+i-1]=0}}]),n}(g),b="\nattribute vec2 vertexPositions;\nattribute float vertexValid;\n\nuniform bool extruded;\nuniform bool isWireframe;\nuniform float elevationScale;\nuniform float opacity;\n\nvarying vec4 vColor;\nvarying float isValid;\n\nstruct PolygonProps {\n  vec4 fillColors;\n  vec4 lineColors;\n  vec3 positions;\n  vec3 nextPositions;\n  vec3 pickingColors;\n  vec2 positions64xyLow;\n  vec2 nextPositions64xyLow;\n  float elevations;\n};\n\nvec3 project_offset_normal(vec3 vector) {\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNG_LAT ||\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS ||\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_AUTO_OFFSET) {\n    return normalize(vector * project_uCommonUnitsPerWorldUnit);\n  }\n  return project_normal(vector);\n}\n\nvoid calculatePosition(PolygonProps props) {\n  vec3 pos;\n  vec2 pos64xyLow;\n  vec3 normal;\n  vec4 colors = isWireframe ? props.lineColors : props.fillColors;\n\n#ifdef IS_SIDE_VERTEX\n  pos = mix(props.positions, props.nextPositions, vertexPositions.x);\n  pos64xyLow = mix(props.positions64xyLow, props.nextPositions64xyLow, vertexPositions.x);\n  isValid = vertexValid;\n#else\n  pos = props.positions;\n  pos64xyLow = props.positions64xyLow;\n  isValid = 1.0;\n#endif\n\n  if (extruded) {\n    pos.z += props.elevations * vertexPositions.y * elevationScale;\n  }\n\n  vec4 position_commonspace;\n  gl_Position = project_position_to_clipspace(pos, pos64xyLow, vec3(0.), position_commonspace);\n\n  if (extruded) {\n#ifdef IS_SIDE_VERTEX\n    normal = vec3(props.positions.y - props.nextPositions.y, props.nextPositions.x - props.positions.x, 0.0);\n    normal = project_offset_normal(normal);\n#else\n    normal = vec3(0.0, 0.0, 1.0);\n#endif\n\n    vec3 lightColor = lighting_getLightColor(colors.rgb, project_uCameraPosition, position_commonspace.xyz, normal);\n    vColor = vec4(lightColor, colors.a * opacity) / 255.0;\n  } else {\n    vColor = vec4(colors.rgb, colors.a * opacity) / 255.0;\n  }\n  picking_setPickingColor(props.pickingColors);\n}\n",L="#define SHADER_NAME solid-polygon-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec2 positions64xyLow;\nattribute float elevations;\nattribute vec4 fillColors;\nattribute vec4 lineColors;\nattribute vec3 pickingColors;\n\n".concat(b,"\n\nvoid main(void) {\n  PolygonProps props;\n\n  props.positions = positions;\n  props.positions64xyLow = positions64xyLow;\n  props.elevations = elevations;\n  props.fillColors = fillColors;\n  props.lineColors = lineColors;\n  props.pickingColors = pickingColors;\n\n  calculatePosition(props);\n}\n"),S="#define SHADER_NAME solid-polygon-layer-vertex-shader-side\n#define IS_SIDE_VERTEX\n\n\nattribute vec3 instancePositions;\nattribute vec2 instancePositions64xyLow;\nattribute vec3 nextPositions;\nattribute vec2 nextPositions64xyLow;\nattribute float instanceElevations;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\n".concat(b,"\n\nvoid main(void) {\n  PolygonProps props;\n\n  props.positions = instancePositions;\n  props.positions64xyLow = instancePositions64xyLow;\n  props.elevations = instanceElevations;\n  props.fillColors = instanceFillColors;\n  props.lineColors = instanceLineColors;\n  props.pickingColors = instancePickingColors;\n  props.nextPositions = nextPositions;\n  props.nextPositions64xyLow = nextPositions64xyLow;\n\n  calculatePosition(props);\n}\n");e.d(n,"a",(function(){return E}));var w=[0,0,0,255],_=new p.a,C={filled:!0,extruded:!1,wireframe:!1,fp64:!1,elevationScale:{type:"number",min:0,value:1},getPolygon:{type:"accessor",value:function(t){return t.polygon}},getElevation:{type:"accessor",value:1e3},getFillColor:{type:"accessor",value:w},getLineColor:{type:"accessor",value:w},material:_},A={enter:function(t,n){return n.length?n.subarray(n.length-t.length):t}},E=function(t){function n(){return Object(i.a)(this,n),Object(r.a)(this,Object(s.a)(n).apply(this,arguments))}return Object(l.a)(n,t),Object(o.a)(n,[{key:"getShaders",value:function(t){return{vs:t,fs:"#define SHADER_NAME solid-polygon-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\nvarying float isValid;\n\nvoid main(void) {\n  if (isValid < 0.5) {\n    discard;\n  }\n\n  gl_FragColor = vColor;\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n}\n",defines:{},modules:[this.use64bitProjection()?"project64":"project32","gouraud-lighting","picking"]}}},{key:"initializeState",value:function(){var t=this,n=this.context.gl;this.setState({numInstances:0,polygonTesselator:new m({IndexType:!n||Object(u.b)(n,f.a.ELEMENT_INDEX_UINT32)?Uint32Array:Uint16Array})});var e=this.getAttributeManager();e.remove(["instancePickingColors"]),e.add({indices:{size:1,isIndexed:!0,update:this.calculateIndices,noAlloc:!0},positions:{size:3,transition:A,accessor:"getPolygon",update:this.calculatePositions,noAlloc:!0,shaderAttributes:{positions:{offset:0,divisor:0},instancePositions:{offset:0,divisor:1},nextPositions:{offset:12,divisor:1}}},positions64xyLow:{size:2,update:this.calculatePositionsLow,noAlloc:!0,shaderAttributes:{positions64xyLow:{offset:0,divisor:0},instancePositions64xyLow:{offset:0,divisor:1},nextPositions64xyLow:{offset:8,divisor:1}}},vertexValid:{size:1,divisor:1,type:5121,update:this.calculateVertexValid,noAlloc:!0},elevations:{size:1,transition:A,accessor:"getElevation",shaderAttributes:{elevations:{divisor:0},instanceElevations:{divisor:1}}},fillColors:{alias:"colors",size:4,type:5121,transition:A,accessor:"getFillColor",defaultValue:w,shaderAttributes:{fillColors:{divisor:0},instanceFillColors:{divisor:1}}},lineColors:{alias:"colors",size:4,type:5121,transition:A,accessor:"getLineColor",defaultValue:w,shaderAttributes:{lineColors:{divisor:0},instanceLineColors:{divisor:1}}},pickingColors:{size:3,type:5121,accessor:function(n,e){var i=e.index,o=e.target;return t.encodePickingColor(i,o)},shaderAttributes:{pickingColors:{divisor:0},instancePickingColors:{divisor:1}}}})}},{key:"draw",value:function(t){var n=t.uniforms,e=this.props,i=e.extruded,o=e.filled,r=e.wireframe,s=e.elevationScale,a=this.state,l=a.topModel,c=a.sideModel,p=a.polygonTesselator,u=Object.assign({},n,{extruded:Boolean(i),elevationScale:s});c&&(c.setInstanceCount(p.instanceCount-1),c.setUniforms(u),r&&(c.setDrawMode(3),c.setUniforms({isWireframe:!0}).draw()),o&&(c.setDrawMode(6),c.setUniforms({isWireframe:!1}).draw())),l&&(l.setVertexCount(p.get("indices").length),l.setUniforms(u).draw())}},{key:"updateState",value:function(t){Object(a.a)(Object(s.a)(n.prototype),"updateState",this).call(this,t),this.updateGeometry(t);var e=t.props,i=t.oldProps,o=this.getAttributeManager();(e.fp64!==i.fp64||e.filled!==i.filled||e.extruded!==i.extruded)&&(this.state.models&&this.state.models.forEach((function(t){return t.delete()})),this.setState(this._getModels(this.context.gl)),o.invalidateAll())}},{key:"updateGeometry",value:function(t){var n=t.props,e=t.oldProps,i=t.changeFlags;if(i.dataChanged||n.fp64!==e.fp64||i.updateTriggersChanged&&(i.updateTriggersChanged.all||i.updateTriggersChanged.getPolygon)){var o=this.state.polygonTesselator;o.updateGeometry({data:n.data,getGeometry:n.getPolygon,positionFormat:n.positionFormat,fp64:this.use64bitPositions()}),this.setState({numInstances:o.instanceCount,bufferLayout:o.bufferLayout}),this.getAttributeManager().invalidateAll()}}},{key:"_getModels",value:function(t){var n,e,i=this.props,o=i.id,r=i.filled,s=i.extruded;if(r){var a=this.getShaders(L);a.defines.NON_INSTANCED_MODEL=1,n=new v.a(t,Object.assign({},a,{id:"".concat(o,"-top"),drawMode:4,attributes:{vertexPositions:new Float32Array([0,1])},uniforms:{isWireframe:!1,isSideVertex:!1},vertexCount:0,isIndexed:!0,shaderCache:this.context.shaderCache}))}return s&&((e=new v.a(t,Object.assign({},this.getShaders(S),{id:"".concat(o,"-side"),geometry:new d.a({drawMode:1,vertexCount:4,attributes:{vertexPositions:{size:2,value:new Float32Array([1,1,0,1,0,0,1,0])}}}),instanceCount:0,isInstanced:1,shaderCache:this.context.shaderCache}))).userData.excludeAttributes={indices:!0}),{models:[e,n].filter(Boolean),topModel:n,sideModel:e}}},{key:"calculateIndices",value:function(t){var n=this.state.polygonTesselator;t.bufferLayout=n.indexLayout,t.value=n.get("indices")}},{key:"calculatePositions",value:function(t){var n=this.state.polygonTesselator;t.bufferLayout=n.bufferLayout,t.value=n.get("positions")}},{key:"calculatePositionsLow",value:function(t){var n=this.use64bitPositions();t.constant=!n,t.value=n?this.state.polygonTesselator.get("positions64xyLow"):new Float32Array(2)}},{key:"calculateVertexValid",value:function(t){t.value=this.state.polygonTesselator.get("vertexValid")}},{key:"clearPickingColor",value:function(t){for(var n=this.decodePickingColor(t),e=this.state.polygonTesselator.bufferLayout,i=e[n],o=0,r=0;r<n;r++)o+=e[r];var s=this.getAttributeManager().attributes.pickingColors,a=s.value,l=o+i;a.fill(0,3*o,3*l),s.update({value:a})}}]),n}(c.a);E.layerName="SolidPolygonLayer",E.defaultProps=C},1076:function(t,n,e){"use strict";e.d(n,"b",(function(){return v})),e.d(n,"c",(function(){return d})),e.d(n,"a",(function(){return h}));var i=e(1264),o=e.n(i);function r(t){if(t=t&&t.positions||t,!Array.isArray(t)&&!ArrayBuffer.isView(t))throw new Error("invalid polygon")}function s(t){return t.length>=1&&t[0].length>=2&&Number.isFinite(t[0][0])}function a(t){var n=t[0],e=t[t.length-1];return n[0]===e[0]&&n[1]===e[1]&&n[2]===e[2]}function l(t,n,e,i){for(var o=0;o<n;o++)if(t[e+o]!==t[i-n+o])return!1;return!0}function c(t,n,e,i){for(var o=n,r=e.length,s=0;s<r;s++)for(var l=0;l<i;l++)t[o++]=e[s][l]||0;if(!a(e))for(var c=0;c<i;c++)t[o++]=e[0][c]||0;return o}function p(t,n,e,i){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,r=arguments.length>5?arguments[5]:void 0,s=(r=r||e.length)-o;if(s<=0)return n;for(var a=n,c=0;c<s;c++)t[a++]=e[o+c];if(!l(e,i,o,r))for(var p=0;p<i;p++)t[a++]=e[o+p];return a}function u(t){return(a(t)?0:1)+t.length}function f(t,n){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,i=arguments.length>3?arguments[3]:void 0;return e>=(i=i||t.length)?0:(l(t,n,e,i)?0:1)+(i-e)/n}function v(t,n){if(r(t),t.positions){var e=t,i=e.positions,o=e.holeIndices;if(o){for(var a=0,l=0;l<=o.length;l++)a+=f(t.positions,n,o[l-1],o[l]);return a}t=i}if(Number.isFinite(t[0]))return f(t,n);if(!s(t)){var c=0,p=!0,v=!1,d=void 0;try{for(var h,x=t[Symbol.iterator]();!(p=(h=x.next()).done);p=!0){c+=u(h.value)}}catch(t){v=!0,d=t}finally{try{p||null==x.return||x.return()}finally{if(v)throw d}}return c}return u(t)}function d(t,n,e){r(t),e=e||v(t,n);var i=new Float64Array(e*n),o=[];if(t.positions){var a=t,l=a.positions,u=a.holeIndices;if(u){for(var f=0,d=0;d<=u.length;d++)f=p(i,f,l,n,u[d-1],u[d]),o.push(f);return o.pop(),{positions:i,holeIndices:o}}t=l}if(Number.isFinite(t[0]))return p(i,0,t,n),{positions:i,holeIndices:null};if(!s(t)){var h=0,x=!0,y=!1,g=void 0;try{for(var P,m=t[Symbol.iterator]();!(x=(P=m.next()).done);x=!0){h=c(i,h,P.value,n),o.push(h)}}catch(t){y=!0,g=t}finally{try{x||null==m.return||m.return()}finally{if(y)throw g}}return o.pop(),{positions:i,holeIndices:o}}return c(i,0,t,n),{positions:i,holeIndices:null}}function h(t,n){var e=null;return t.holeIndices&&(e=t.holeIndices.map((function(t){return t/n}))),o()(t.positions,e,n)}},1145:function(t,n,e){"use strict";var i=e(945),o=e(948),r=e(947),s=e(955),a=e(949);e.d(n,"a",(function(){return c}));var l={ambient:.35,diffuse:.6,shininess:32,specularColor:[30,30,30]},c=function(t){function n(t){var e;return Object(i.a)(this,n),e=Object(o.a)(this,Object(r.a)(n).call(this,t)),t=Object.assign({},l,t),Object.assign(Object(s.a)(e),t),e}return Object(a.a)(n,t),n}((function t(){Object(i.a)(this,t)}))},1264:function(t,n,e){"use strict";function i(t,n,e){e=e||2;var i,a,l,c,p,v,d,x=n&&n.length,y=x?n[0]*e:t.length,g=o(t,0,y,e,!0),P=[];if(!g||g.next===g.prev)return P;if(x&&(g=function(t,n,e,i){var s,a,l,c,p,v=[];for(s=0,a=n.length;s<a;s++)l=n[s]*i,c=s<a-1?n[s+1]*i:t.length,(p=o(t,l,c,i,!1))===p.next&&(p.steiner=!0),v.push(h(p));for(v.sort(u),s=0;s<v.length;s++)f(v[s],e),e=r(e,e.next);return e}(t,n,g,e)),t.length>80*e){i=l=t[0],a=c=t[1];for(var m=e;m<y;m+=e)(p=t[m])<i&&(i=p),(v=t[m+1])<a&&(a=v),p>l&&(l=p),v>c&&(c=v);d=0!==(d=Math.max(l-i,c-a))?1/d:0}return s(g,P,e,i,a,d),P}function o(t,n,e,i,o){var r,s;if(o===E(t,n,e,i)>0)for(r=n;r<e;r+=i)s=_(r,t[r],t[r+1],s);else for(r=e-i;r>=n;r-=i)s=_(r,t[r],t[r+1],s);return s&&P(s,s.next)&&(C(s),s=s.next),s}function r(t,n){if(!t)return t;n||(n=t);var e,i=t;do{if(e=!1,i.steiner||!P(i,i.next)&&0!==g(i.prev,i,i.next))i=i.next;else{if(C(i),(i=n=i.prev)===i.next)break;e=!0}}while(e||i!==n);return n}function s(t,n,e,i,o,u,f){if(t){!f&&u&&function(t,n,e,i){var o=t;do{null===o.z&&(o.z=d(o.x,o.y,n,e,i)),o.prevZ=o.prev,o.nextZ=o.next,o=o.next}while(o!==t);o.prevZ.nextZ=null,o.prevZ=null,function(t){var n,e,i,o,r,s,a,l,c=1;do{for(e=t,t=null,r=null,s=0;e;){for(s++,i=e,a=0,n=0;n<c&&(a++,i=i.nextZ);n++);for(l=c;a>0||l>0&&i;)0!==a&&(0===l||!i||e.z<=i.z)?(o=e,e=e.nextZ,a--):(o=i,i=i.nextZ,l--),r?r.nextZ=o:t=o,o.prevZ=r,r=o;e=i}r.nextZ=null,c*=2}while(s>1)}(o)}(t,i,o,u);for(var v,h,x=t;t.prev!==t.next;)if(v=t.prev,h=t.next,u?l(t,i,o,u):a(t))n.push(v.i/e),n.push(t.i/e),n.push(h.i/e),C(t),t=h.next,x=h.next;else if((t=h)===x){f?1===f?s(t=c(r(t),n,e),n,e,i,o,u,2):2===f&&p(t,n,e,i,o,u):s(r(t),n,e,i,o,u,1);break}}}function a(t){var n=t.prev,e=t,i=t.next;if(g(n,e,i)>=0)return!1;for(var o=t.next.next;o!==t.prev;){if(x(n.x,n.y,e.x,e.y,i.x,i.y,o.x,o.y)&&g(o.prev,o,o.next)>=0)return!1;o=o.next}return!0}function l(t,n,e,i){var o=t.prev,r=t,s=t.next;if(g(o,r,s)>=0)return!1;for(var a=o.x<r.x?o.x<s.x?o.x:s.x:r.x<s.x?r.x:s.x,l=o.y<r.y?o.y<s.y?o.y:s.y:r.y<s.y?r.y:s.y,c=o.x>r.x?o.x>s.x?o.x:s.x:r.x>s.x?r.x:s.x,p=o.y>r.y?o.y>s.y?o.y:s.y:r.y>s.y?r.y:s.y,u=d(a,l,n,e,i),f=d(c,p,n,e,i),v=t.prevZ,h=t.nextZ;v&&v.z>=u&&h&&h.z<=f;){if(v!==t.prev&&v!==t.next&&x(o.x,o.y,r.x,r.y,s.x,s.y,v.x,v.y)&&g(v.prev,v,v.next)>=0)return!1;if(v=v.prevZ,h!==t.prev&&h!==t.next&&x(o.x,o.y,r.x,r.y,s.x,s.y,h.x,h.y)&&g(h.prev,h,h.next)>=0)return!1;h=h.nextZ}for(;v&&v.z>=u;){if(v!==t.prev&&v!==t.next&&x(o.x,o.y,r.x,r.y,s.x,s.y,v.x,v.y)&&g(v.prev,v,v.next)>=0)return!1;v=v.prevZ}for(;h&&h.z<=f;){if(h!==t.prev&&h!==t.next&&x(o.x,o.y,r.x,r.y,s.x,s.y,h.x,h.y)&&g(h.prev,h,h.next)>=0)return!1;h=h.nextZ}return!0}function c(t,n,e){var i=t;do{var o=i.prev,s=i.next.next;!P(o,s)&&m(o,i,i.next,s)&&S(o,s)&&S(s,o)&&(n.push(o.i/e),n.push(i.i/e),n.push(s.i/e),C(i),C(i.next),i=t=s),i=i.next}while(i!==t);return r(i)}function p(t,n,e,i,o,a){var l=t;do{for(var c=l.next.next;c!==l.prev;){if(l.i!==c.i&&y(l,c)){var p=w(l,c);return l=r(l,l.next),p=r(p,p.next),s(l,n,e,i,o,a),void s(p,n,e,i,o,a)}c=c.next}l=l.next}while(l!==t)}function u(t,n){return t.x-n.x}function f(t,n){if(n=function(t,n){var e,i=n,o=t.x,r=t.y,s=-1/0;do{if(r<=i.y&&r>=i.next.y&&i.next.y!==i.y){var a=i.x+(r-i.y)*(i.next.x-i.x)/(i.next.y-i.y);if(a<=o&&a>s){if(s=a,a===o){if(r===i.y)return i;if(r===i.next.y)return i.next}e=i.x<i.next.x?i:i.next}}i=i.next}while(i!==n);if(!e)return null;if(o===s)return e;var l,c=e,p=e.x,u=e.y,f=1/0;i=e;do{o>=i.x&&i.x>=p&&o!==i.x&&x(r<u?o:s,r,p,u,r<u?s:o,r,i.x,i.y)&&(l=Math.abs(r-i.y)/(o-i.x),S(i,t)&&(l<f||l===f&&(i.x>e.x||i.x===e.x&&v(e,i)))&&(e=i,f=l)),i=i.next}while(i!==c);return e}(t,n)){var e=w(n,t);r(n,n.next),r(e,e.next)}}function v(t,n){return g(t.prev,t,n.prev)<0&&g(n.next,t,t.next)<0}function d(t,n,e,i,o){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-e)*o)|t<<8))|t<<4))|t<<2))|t<<1))|(n=1431655765&((n=858993459&((n=252645135&((n=16711935&((n=32767*(n-i)*o)|n<<8))|n<<4))|n<<2))|n<<1))<<1}function h(t){var n=t,e=t;do{(n.x<e.x||n.x===e.x&&n.y<e.y)&&(e=n),n=n.next}while(n!==t);return e}function x(t,n,e,i,o,r,s,a){return(o-s)*(n-a)-(t-s)*(r-a)>=0&&(t-s)*(i-a)-(e-s)*(n-a)>=0&&(e-s)*(r-a)-(o-s)*(i-a)>=0}function y(t,n){return t.next.i!==n.i&&t.prev.i!==n.i&&!function(t,n){var e=t;do{if(e.i!==t.i&&e.next.i!==t.i&&e.i!==n.i&&e.next.i!==n.i&&m(e,e.next,t,n))return!0;e=e.next}while(e!==t);return!1}(t,n)&&(S(t,n)&&S(n,t)&&function(t,n){var e=t,i=!1,o=(t.x+n.x)/2,r=(t.y+n.y)/2;do{e.y>r!=e.next.y>r&&e.next.y!==e.y&&o<(e.next.x-e.x)*(r-e.y)/(e.next.y-e.y)+e.x&&(i=!i),e=e.next}while(e!==t);return i}(t,n)&&(g(t.prev,t,n.prev)||g(t,n.prev,n))||P(t,n)&&g(t.prev,t,t.next)>0&&g(n.prev,n,n.next)>0)}function g(t,n,e){return(n.y-t.y)*(e.x-n.x)-(n.x-t.x)*(e.y-n.y)}function P(t,n){return t.x===n.x&&t.y===n.y}function m(t,n,e,i){var o=L(g(t,n,e)),r=L(g(t,n,i)),s=L(g(e,i,t)),a=L(g(e,i,n));return o!==r&&s!==a||(!(0!==o||!b(t,e,n))||(!(0!==r||!b(t,i,n))||(!(0!==s||!b(e,t,i))||!(0!==a||!b(e,n,i)))))}function b(t,n,e){return n.x<=Math.max(t.x,e.x)&&n.x>=Math.min(t.x,e.x)&&n.y<=Math.max(t.y,e.y)&&n.y>=Math.min(t.y,e.y)}function L(t){return t>0?1:t<0?-1:0}function S(t,n){return g(t.prev,t,t.next)<0?g(t,n,t.next)>=0&&g(t,t.prev,n)>=0:g(t,n,t.prev)<0||g(t,t.next,n)<0}function w(t,n){var e=new A(t.i,t.x,t.y),i=new A(n.i,n.x,n.y),o=t.next,r=n.prev;return t.next=n,n.prev=t,e.next=o,o.prev=e,i.next=e,e.prev=i,r.next=i,i.prev=r,i}function _(t,n,e,i){var o=new A(t,n,e);return i?(o.next=i.next,o.prev=i,i.next.prev=o,i.next=o):(o.prev=o,o.next=o),o}function C(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function A(t,n,e){this.i=t,this.x=n,this.y=e,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function E(t,n,e,i){for(var o=0,r=n,s=e-i;r<e;r+=i)o+=(t[s]-t[r])*(t[r+1]+t[s+1]),s=r;return o}t.exports=i,t.exports.default=i,i.deviation=function(t,n,e,i){var o=n&&n.length,r=o?n[0]*e:t.length,s=Math.abs(E(t,0,r,e));if(o)for(var a=0,l=n.length;a<l;a++){var c=n[a]*e,p=a<l-1?n[a+1]*e:t.length;s-=Math.abs(E(t,c,p,e))}var u=0;for(a=0;a<i.length;a+=3){var f=i[a]*e,v=i[a+1]*e,d=i[a+2]*e;u+=Math.abs((t[f]-t[d])*(t[v+1]-t[f+1])-(t[f]-t[v])*(t[d+1]-t[f+1]))}return 0===s&&0===u?0:Math.abs((u-s)/s)},i.flatten=function(t){for(var n=t[0][0].length,e={vertices:[],holes:[],dimensions:n},i=0,o=0;o<t.length;o++){for(var r=0;r<t[o].length;r++)for(var s=0;s<n;s++)e.vertices.push(t[o][r][s]);o>0&&(i+=t[o-1].length,e.holes.push(i))}return e}}}]);